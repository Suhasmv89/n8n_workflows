{
  "active": false,
  "connections": {
    "Get Daily Sales Data": {
      "main": [
        [
          {
            "node": "format_sales_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Top Products": {
      "main": [
        [
          {
            "node": "format_product_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Yesterday Data": {
      "main": [
        [
          {
            "node": "format_yesterday_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Sales Data": {
      "main": [
        [
          {
            "node": "Check Low Revenue Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "create_html_summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Low Revenue Alert": {
      "main": [
        [
          {
            "node": "low_sales_notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Process Sales Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "trigger_9_pm": {
      "main": [
        [
          {
            "node": "Get Daily Sales Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Top Products",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Yesterday Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format_sales_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format_product_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "format_yesterday_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "create_html_summary": {
      "main": [
        [
          {
            "node": "send_summary_to_gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-26T23:56:29.553Z",
  "id": "HA1VHf5m6bcQW5ri",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "daily_sales_summary",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    COUNT(*) as total_orders,\n    COALESCE(SUM(total_amount), 0) as total_revenue,\n    ROUND(COALESCE(AVG(total_amount), 0), 2) as average_order_value,\n    COUNT(DISTINCT customer_id) as unique_customers,\n    COALESCE(MAX(total_amount), 0) as highest_order,\n    COALESCE(MIN(total_amount), 0) as lowest_order\nFROM orders \nWHERE order_date::DATE = (SELECT MAX(order_date::DATE) FROM orders);",
        "options": {}
      },
      "id": "48ce1140-1a6d-4267-ae35-62f67f3f1e38",
      "name": "Get Daily Sales Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -220,
        20
      ],
      "credentials": {
        "postgres": {
          "id": "jykCaJIHcxQsqWk7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    p.product_name,\n    SUM(oi.quantity) as units_sold,\n    SUM(oi.price * oi.quantity) as revenue,\n    COUNT(DISTINCT oi.order_id) as orders_count\nFROM order_items oi\nJOIN products p ON oi.product_id = p.id\nJOIN orders o ON oi.order_id = o.id\nWHERE order_date::DATE = (SELECT MAX(order_date::DATE) FROM orders)\nGROUP BY p.id, p.product_name\nORDER BY units_sold DESC\nLIMIT 5;",
        "options": {}
      },
      "id": "0163005d-d466-4ce1-9c25-7b337ca5a5ab",
      "name": "Get Top Products",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -220,
        220
      ],
      "credentials": {
        "postgres": {
          "id": "jykCaJIHcxQsqWk7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    'Yesterday' as period,\n    COALESCE(COUNT(*), 0) as total_orders,\n    COALESCE(SUM(total_amount), 0) as total_revenue\nFROM orders \nWHERE order_date::DATE = (SELECT MAX(order_date::DATE) FROM orders) - INTERVAL '1 day';",
        "options": {}
      },
      "id": "f844b722-4db5-4db1-adf1-7562afe86d6c",
      "name": "Get Yesterday Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -220,
        420
      ],
      "credentials": {
        "postgres": {
          "id": "jykCaJIHcxQsqWk7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get data from previous nodes\n//const salesData = $(\"Get Daily Sales Data\").first().json || {};\n//const productData = $(\"Get Top Products\").first().json || {};\n//const yesterdayData = $(\"Get Yesterday Data\").first().json || {};\n// Get all input data\nconst allData = $input.all();\n\nlet salesData = {};\nlet productData = [];\nlet yesterdayData = {};\n\n// Sort data by source identifier\nallData.forEach(item => {\n  const data = item.json;\n  \n  switch(data._source) {\n    case 'daily_sales':\n      salesData = data;\n      break;\n    case 'top_products':\n      productData = Array.isArray(data) ? data : [data];\n      break;\n    case 'yesterday_data':\n      yesterdayData = data;\n      break;\n  }\n});\n\n// Format currency function\nconst formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'INR'\n  }).format(amount || 0);\n};\n\n// Calculate growth percentage\nconst todayRevenue = parseFloat(salesData.total_revenue || 0);\nconst yesterdayRevenue = parseFloat(yesterdayData.total_revenue || 0);\nlet revenueGrowth = 0;\nlet growthDirection = '';\n\nif (yesterdayRevenue > 0) {\n  revenueGrowth = ((todayRevenue - yesterdayRevenue) / yesterdayRevenue * 100);\n  growthDirection = revenueGrowth >= 0 ? 'üìà' : 'üìâ';\n}\n\n// Get current date\nconst today = new Date();\nconst dateOptions = { \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric',\n  weekday: 'long'\n};\n\n// Create formatted report data\nconst report = {\n  date: today.toLocaleDateString('en-US', dateOptions),\n  shortDate: today.toLocaleDateString('en-US'),\n  totalOrders: parseInt(salesData.total_orders || 0),\n  totalRevenue: formatCurrency(salesData.total_revenue),\n  rawRevenue: parseFloat(salesData.total_revenue || 0),\n  avgOrderValue: formatCurrency(salesData.average_order_value),\n  uniqueCustomers: parseInt(salesData.unique_customers || 0),\n  highestOrder: formatCurrency(salesData.highest_order),\n  lowestOrder: formatCurrency(salesData.lowest_order),\n  revenueGrowth: revenueGrowth.toFixed(1),\n  growthDirection: growthDirection,\n  yesterdayRevenue: formatCurrency(yesterdayRevenue),\n  topProducts: productData.map(product => ({\n    name: product.product_name,\n    units: parseInt(product.units_sold),\n    revenue: formatCurrency(product.revenue),\n    orders: parseInt(product.orders_count)\n  })),\n  hasOrders: parseInt(salesData.total_orders || 0) > 0,\n  performanceEmoji: todayRevenue > 1000 ? 'üöÄ' : todayRevenue > 500 ? 'üìä' : 'üìà',\n  yesterdayData: yesterdayData,\n  salesData: salesData,\n  productData: productData\n};\n\nreturn [{ json: report }];"
      },
      "id": "2431043f-feb1-4e8b-b7b8-cec6ed25bd62",
      "name": "Process Sales Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        220
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09CAF2UGKW",
          "mode": "id"
        },
        "text": "=üìä *Daily Sales Summary - {{$node['Process Sales Data'].json.shortDate}}*\n\nüéØ *Key Metrics:*\n‚Ä¢ Orders: {{$node['Process Sales Data'].json.totalOrders}}\n‚Ä¢ Revenue: {{$node['Process Sales Data'].json.totalRevenue}} ({{$node['Process Sales Data'].json.growthDirection}} {{ $('Process Sales Data').item.json.revenueGrowth }}%)\n‚Ä¢ Avg Order: {{$node['Process Sales Data'].json.avgOrderValue}}\n‚Ä¢ Customers: {{$node['Process Sales Data'].json.uniqueCustomers}}\n\n\nüèÜ *Top Products:*\n\n‚Ä¢ {{ $('Process Sales Data').item.json.topProducts[0].name }}: {{ $('Process Sales Data').item.json.topProducts[0].units }} units {{ $('Process Sales Data').item.json.topProducts[0].revenue }}\n\n\nüìà Range: {{$node['Process Sales Data'].json.lowestOrder}} - {{$node['Process Sales Data'].json.highestOrder}}\n\n\n_Detailed report sent via email._",
        "otherOptions": {}
      },
      "id": "76a020ee-6552-4e84-8e23-f29e96c38890",
      "name": "Send Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        660,
        220
      ],
      "webhookId": "755277a3-5d89-493d-a45d-84a3db6c2e48",
      "credentials": {
        "slackApi": {
          "id": "qZm8njhgcr1F27G4",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "h34jg71-bg1b-234j-i56n-am3j4k5l6m7n",
              "leftValue": "={{$node['Process Sales Data'].json.rawRevenue}}",
              "rightValue": 500,
              "operator": {
                "type": "number",
                "operation": "lt",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "71aaf84a-bbc6-411f-88d9-7b041477015d",
      "name": "Check Low Revenue Alert",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        660,
        420
      ]
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        220,
        220
      ],
      "id": "445ec168-f87f-4a74-bca4-9afd62253e29",
      "name": "Merge"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21
            }
          ]
        }
      },
      "id": "3cff3b2a-35d2-46c8-af40-9819dadaa287",
      "name": "trigger_9_pm",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -440,
        220
      ]
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: { ...item.json, _source: 'daily_sales' }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        20
      ],
      "id": "106e0773-610b-4bd2-b4ac-f51daa98477d",
      "name": "format_sales_data"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: { ...item.json, _source: 'top_products' }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        220
      ],
      "id": "eb3613be-9d54-4d57-b0b6-673cf90cf209",
      "name": "format_product_data"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: { ...item.json, _source: 'yesterday_data' }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        420
      ],
      "id": "327d8a47-2d2b-4211-a70c-d8f9ccf37042",
      "name": "format_yesterday_data"
    },
    {
      "parameters": {
        "jsCode": "// Example input JSON (this usually comes from a previous node)\nconst data = $json;\n\n// Build HTML string\nconst html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Daily Sales Report</title>\n  <style>\n    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; color: #333; }\n    .container { max-width: 800px; margin: 0 auto; background-color: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }\n    .header h1 { margin: 0; font-size: 28px; font-weight: 300; }\n    .header p { margin: 10px 0 0 0; opacity: 0.9; font-size: 16px; }\n    .content { padding: 30px; }\n    .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n    .metric-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; transition: transform 0.2s ease; }\n    .metric-card:hover { transform: translateY(-2px); }\n    .metric-card h3 { margin: 0 0 8px 0; color: #666; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px; }\n    .metric-card .value { font-size: 24px; font-weight: bold; color: #333; margin: 0; }\n    .growth { font-size: 12px; margin-top: 5px; padding: 2px 6px; border-radius: 12px; display: inline-block; }\n    .growth.positive { background-color: #d4edda; color: #155724; }\n    .growth.negative { background-color: #f8d7da; color: #721c24; }\n    .products-section { margin-top: 30px; }\n    .products-section h2 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; margin-bottom: 20px; }\n    .products-table { width: 100%; border-collapse: collapse; margin-top: 10px; }\n    .products-table th { background-color: #667eea; color: white; padding: 12px; text-align: left; font-weight: 500; }\n    .products-table td { padding: 12px; border-bottom: 1px solid #eee; }\n    .products-table tr:hover { background-color: #f8f9fa; }\n    .no-data { text-align: center; padding: 40px; color: #666; font-style: italic; }\n    .footer { background-color: #f8f9fa; padding: 20px 30px; text-align: center; color: #666; font-size: 12px; border-top: 1px solid #eee; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>${data.performanceEmoji || ''} Daily Sales Report</h1>\n      <p>${data.date || ''}</p>\n    </div>\n    \n    <div class=\"content\">\n      ${data.hasOrders ? `\n        <div class=\"metrics-grid\">\n          <div class=\"metric-card\">\n            <h3>Total Orders</h3>\n            <p class=\"value\">${data.totalOrders}</p>\n          </div>\n          <div class=\"metric-card\">\n            <h3>Total Revenue</h3>\n            <p class=\"value\">${data.totalRevenue}</p>\n            <span class=\"growth ${data.revenueGrowth > 0 ? 'positive' : 'negative'}\">\n              ${data.growthDirection} ${data.revenueGrowth}% vs yesterday\n            </span>\n          </div>\n          <div class=\"metric-card\">\n            <h3>Average Order Value</h3>\n            <p class=\"value\">${data.avgOrderValue}</p>\n          </div>\n          <div class=\"metric-card\">\n            <h3>Unique Customers</h3>\n            <p class=\"value\">${data.uniqueCustomers}</p>\n          </div>\n          <div class=\"metric-card\">\n            <h3>Order Range</h3>\n            <p class=\"value\" style=\"font-size: 16px;\">\n              <strong>High:</strong> ${data.highestOrder}<br>\n              <strong>Low:</strong> ${data.lowestOrder}\n            </p>\n          </div>\n        </div>\n\n        ${data.topProducts && data.topProducts.length ? `\n          <div class=\"products-section\">\n            <h2>üèÜ Top Performing Products</h2>\n            <table class=\"products-table\">\n              <thead>\n                <tr>\n                  <th>Product Name</th>\n                  <th>Units Sold</th>\n                  <th>Revenue</th>\n                  <th>Orders</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${data.topProducts.map(p => `\n                  <tr>\n                    <td><strong>${p.name}</strong></td>\n                    <td>${p.units}</td>\n                    <td>${p.revenue}</td>\n                    <td>${p.orders}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n        ` : ''}\n      ` : `\n        <div class=\"no-data\">\n          <h2>üìä No Sales Today</h2>\n          <p>No orders were processed today. This might be normal for weekends or holidays.</p>\n        </div>\n      `}\n    </div>\n    \n    <div class=\"footer\">\n      <p>Daily Sales Report ‚Ä¢ Generated automatically at ${data.shortDate || ''} 11:59 PM</p>\n      <p>This report includes all orders placed today in your local timezone.</p>\n    </div>\n  </div>\n</body>\n</html>\n`;\n\n// Return HTML\nreturn [{ json: { html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        20
      ],
      "id": "8f32b3df-7821-4383-b9be-a87a8f43950e",
      "name": "create_html_summary"
    },
    {
      "parameters": {
        "sendTo": "suhas.mv89@gmail.com",
        "subject": "=üìä Daily Sales Summary - {{$node['Process Sales Data'].json.shortDate}}",
        "message": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        880,
        20
      ],
      "id": "9b101c17-491f-4c81-8976-68a25458f3c3",
      "name": "send_summary_to_gmail",
      "webhookId": "fd27f6ce-2226-4c57-8348-b7ffc9fa06fd",
      "credentials": {
        "gmailOAuth2": {
          "id": "k80pQqowWBdiY8PB",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "suhas.mv89@gmail.com",
        "subject": "=‚ö†Ô∏è Low Sales Alert - {{$node['Process Sales Data'].json.shortDate}}",
        "message": "=Revenue for today is {{ $json.rawRevenue }} which is lessa than average revenue of 500",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        880,
        420
      ],
      "id": "c0c5b680-9fc7-4d04-91ec-3daf3ab76cc8",
      "name": "low_sales_notification",
      "webhookId": "fd27f6ce-2226-4c57-8348-b7ffc9fa06fd",
      "credentials": {
        "gmailOAuth2": {
          "id": "k80pQqowWBdiY8PB",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Daily sales summary\nThis workflow creates an automated Daily Sales Summary system that fetches data from a PostgreSQL database, processes it into a structured report, and delivers insights through Slack notifications and email summaries. The workflow runs every day at 9 PM, ensuring stakeholders receive timely updates on orders, revenue, and top-performing products. It also includes an alert mechanism for low sales days.",
        "height": 720,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -520,
        -100
      ],
      "id": "a50a5669-fe25-4239-a81e-6af7c2188156",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-05T00:14:07.000Z",
  "versionId": "5d2c338d-8191-4483-9fcd-d35a6eeeb6e6"
}